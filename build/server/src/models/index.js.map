{"version":3,"sources":["../../../../api/server/src/models/index.js"],"names":["basename","path","__filename","env","process","NODE_ENV","config","configJson","console","log","db","sequelize","environment","Sequelize","use_env_variable","DB_NAME","DB_USER","DB_PASS","host","DB_HOST","port","DB_PORT","dialect","dialectOption","ssl","logging","database","username","password","fs","readdirSync","__dirname","filter","file","indexOf","slice","forEach","model","join","name","Object","keys","modelName","associate"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,IAAMA,QAAQ,GAACC,iBAAKD,QAAL,CAAcE,UAAd,CAAf;;AACA,IAAMC,GAAG,GAACC,OAAO,CAACD,GAAR,CAAYE,QAAZ,GAAuBD,OAAO,CAACD,GAAR,CAAYE,QAAnC,GAA8C,aAAxD;AAEA,IAAMC,MAAM,GAACC,mBAAWJ,GAAX,CAAb;AAEAK,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAwCN,GAAxC;AAEA,IAAMO,EAAE,GAAC,EAAT;AAEA,IAAIC,SAAJ;;AAEA,IAAGL,MAAM,CAACM,WAAP,KAAsB,YAAzB,EAAsC;AACrCD,EAAAA,SAAS,GAAC,IAAIE,qBAAJ,CACTT,OAAO,CAACD,GAAR,CAAYG,MAAM,CAACQ,gBAAnB,CADS,EAC4BR,MAD5B,CAAV;AAIAK,EAAAA,SAAS,GAAC,IAAIE,qBAAJ,CACTT,OAAO,CAACD,GAAR,CAAYY,OADH,EAETX,OAAO,CAACD,GAAR,CAAYa,OAFH,EAGTZ,OAAO,CAACD,GAAR,CAAYc,OAHH,EAGW;AACnBC,IAAAA,IAAI,EAAEd,OAAO,CAACD,GAAR,CAAYgB,OADC;AAEnBC,IAAAA,IAAI,EAAEhB,OAAO,CAACD,GAAR,CAAYkB,OAFC;AAGnBC,IAAAA,OAAO,EAAE,UAHU;AAInBC,IAAAA,aAAa,EAAC;AACbC,MAAAA,GAAG,EAAE,IADQ;AAEb,gBAAO;AAFM,KAJK;AAQnBC,IAAAA,OAAO,EAAE;AARU,GAHX,CAAV;AAcA,CAnBD,MAmBM;AACLd,EAAAA,SAAS,GAAC,IAAIE,qBAAJ,CACTP,MAAM,CAACoB,QADE,EACOpB,MAAM,CAACqB,QADd,EACuBrB,MAAM,CAACsB,QAD9B,EACuCtB,MADvC,CAAV;AAGA;;AAEDuB,eACGC,WADH,CACeC,SADf,EAEGC,MAFH,CAEU,UAACC,IAAD,EAAU;AAChB,SAAQA,IAAI,CAACC,OAAL,CAAa,GAAb,MAAsB,CAAvB,IACCD,IAAI,KAAKjC,QADV,IACwBiC,IAAI,CAACE,KAAL,CAAW,CAAC,CAAZ,MAAmB,KADlD;AAED,CALH,EAMGC,OANH,CAMW,UAACH,IAAD,EAAU;AACjB,MAAMI,KAAK,GAAG1B,SAAS,UAAT,CAAiBV,iBAAKqC,IAAL,CAAUP,SAAV,EAAqBE,IAArB,CAAjB,CAAd;AACAvB,EAAAA,EAAE,CAAC2B,KAAK,CAACE,IAAP,CAAF,GAAiBF,KAAjB;AACD,CATH;;AAWAG,MAAM,CAACC,IAAP,CAAY/B,EAAZ,EAAgB0B,OAAhB,CAAwB,UAACM,SAAD,EAAe;AACrC,MAAIhC,EAAE,CAACgC,SAAD,CAAF,CAAcC,SAAlB,EAA6B;AAC3BjC,IAAAA,EAAE,CAACgC,SAAD,CAAF,CAAcC,SAAd,CAAwBjC,EAAxB;AACD;AACF,CAJD;AAMAA,EAAE,CAACC,SAAH,GAAeA,SAAf;AACAD,EAAE,CAACG,SAAH,GAAeA,qBAAf;eAEeH,E","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport Sequelize from 'sequelize';\nimport configJson from '../config/config';\n\nconst basename=path.basename(__filename);\nconst env=process.env.NODE_ENV ? process.env.NODE_ENV : 'development';\n\nconst config=configJson[env];\n\nconsole.log('this is the environment: ',env);\n\nconst db={};\n\nlet sequelize;\n\nif(config.environment ==='production'){\n\tsequelize=new Sequelize(\n\t\tprocess.env[config.use_env_variable],config\n\t);\n\n\tsequelize=new Sequelize(\n\t\tprocess.env.DB_NAME,\n\t\tprocess.env.DB_USER,\n\t\tprocess.env.DB_PASS,{\n\t\t\thost: process.env.DB_HOST,\n\t\t\tport: process.env.DB_PORT,\n\t\t\tdialect: 'postgres',\n\t\t\tdialectOption:{\n\t\t\t\tssl: true,\n\t\t\t\tnative:true\n\t\t\t},\n\t\t\tlogging: true\n\t\t}\n\t);\n} else{\n\tsequelize=new Sequelize(\n\t\tconfig.database,config.username,config.password,config\n\t);\n}\n\nfs\n  .readdirSync(__dirname)\n  .filter((file) => {\n    return (file.indexOf('.') !== 0) && \n           (file !== basename) && (file.slice(-3) === '.js');\n  })\n  .forEach((file) => {\n    const model = sequelize.import(path.join(__dirname, file));\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach((modelName) => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nexport default db;\n"],"file":"index.js"}